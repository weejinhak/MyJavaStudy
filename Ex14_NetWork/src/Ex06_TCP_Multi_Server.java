import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;
import java.util.Iterator;

//다중 채팅
//서버 1개 
//여러명의 클라이언트
public class Ex06_TCP_Multi_Server {
	ServerSocket serversocket = null;
	Socket socket = null;
	//key point
	HashMap<String, DataOutputStream> ClientMap;
	
	//생성자
	Ex06_TCP_Multi_Server(){
		//각 클라이언트 (Socket 출력객체를 관리)
		ClientMap = new HashMap<String,DataOutputStream>();
	}
	
	
	
	//1. 서버 소켓 초기화
	public void init(){
		try{
			serversocket = new ServerSocket(9999);
			System.out.println("[서버가 시작 되었습니다]");
			
			while(true){
				socket = serversocket.accept();
				System.out.println("[" + socket.getInetAddress() + "/"+
				                  socket.getPort() + "]");
				
				//코드 작업
				//클라이언트 접속시 마다 ...
				Thread client = new MultiServerRev(socket);
				client.start();
				
			}
			
		}catch(Exception e){
			
			System.out.println("Init() : " + e.getMessage());
		}
	}
	
	//2. 접속된 모든 클라이언트에게 (Socket) 메시지를 전달하는 기능 함수
	//(key,value)
	//key => 사용자 ID(고유한 값) ex) kglim , hong , kim , lee
	//ClientMap<"홍길동",각각의 socket객체에서 얻어낸 DataOutPutStream객체>
	//ClientMap<"김유신",각각의 socket객체에서 얻어낸 DataOutPutStream객체>
	void SendAllMsg(String msg){
		Iterator<String> ClientKeySet = ClientMap.keySet().iterator();
		while(ClientKeySet.hasNext()){
			try{
				 DataOutputStream clientout = ClientMap.get(ClientKeySet.next());
				 //각각의 클라이언트에게 메시지 출력
				 clientout.writeUTF(msg);
			}catch(Exception e){
				System.out.println("Send Allmsg : " + e.getMessage());
			}
		}
	}

	//3. 접속된 유저 리스트 관리하기
	String showUserList(String name){
		StringBuilder output = new StringBuilder("<<접속자 목록>>\r\n");
		Iterator<String> users = ClientMap.keySet().iterator();
		while(users.hasNext()){
			try{
				String key = users.next(); //홍길동 , 김유신 (접속한 ID)
				if(key.equals(name)){ //목록을 요청한 사용자라면
					key +="(*)";
				}
				output.append(key+"\r\n");
			}catch(Exception e){
				System.out.println("ShowUserList 예외 : " + e.getMessage());
			}
		}
		output.append("<<" + ClientMap.size() + ">>" + "명 접속중 ...\r\n");
		return output.toString();
	}
	
	//4.귓속말 기능
	void SendToMsg(String fromname , String toname , String toMsg){
		try {
				ClientMap.get(toname).writeUTF("귓속말 from (" + fromname + ")=>" + toMsg);
				ClientMap.get(fromname).writeUTF("귓속말 to(" + toname + ")=>" + toMsg);
		} catch (IOException e) {
				System.out.println("SentToMsg : " + e.getMessage());
		}	
	}
	
	//Thread 사용  (inner class)
	class MultiServerRev extends Thread{
		Socket socket = null;
		DataInputStream in;
		DataOutputStream out;
		
		MultiServerRev(Socket socket) {
			this.socket = socket;
			
			try{
				in = new DataInputStream(this.socket.getInputStream());
				out = new DataOutputStream(this.socket.getOutputStream());
			}catch(Exception e){
				System.out.println("MultiServerRev :" + e.getMessage());
			}
		}
		
		@Override
		public void run(){
			//기본 클라이언트 : in.readUTF() , out.WriteUTF()
			String name=""; //클라이언트 이름(key) 저장
			try{
				//연결된 socket을 통해서 Client 메시지 전달
				out.writeUTF("이름을 입력하세요");
				name = in.readUTF();
				out.writeUTF("현재 채팅방에 입장하였습니다");
				
				//서버에 접속된 모든 사용자에게 (Socket) 입력된 내용 전달
				SendAllMsg(name + "님 입장하였습니다");
				
				//key point ^^
				ClientMap.put(name, out); //Map(이름, 각각 socket output)
				System.out.println("서버 모니터링 : 현재 접속자는" + ClientMap.size() + "명");
				
				//추가기능 (대화기능)
				while(in != null){
					String msg = in.readUTF();
					
					//채팅창에> /접속자
					
					if(msg.startsWith("/")){
						if(msg.trim().equals("/접속자")){
							out.writeUTF(showUserList(name)); //접속자 목록 출력
						}else if(msg.startsWith("/귓속말")){
							String[] msgArr = msg.split(" ",3); //[/귓속말] [홍길동] [방가방가]
							if(msgArr == null || msgArr.length < 3){
								out.writeUTF("HELP: 귓속말 사용법:\r\n /귓속말 [상대방이름] [보낼메시지]");
								//> /귓속말 홍길동 방가방가
							}else{
								//[/귓속말] [홍길동] [방가방가]
								String toName = msgArr[1];//홍길동
								String toMsg = msgArr[2]; //방가방가
								if(ClientMap.containsKey(toName)){
									//메시지 보내기
									//특정 상대에게만 메시지
									SendToMsg(name, toName, toMsg);
								}else{
									out.writeUTF("입력하신 사용자가 없습니다");
								}
							}
						}else{
							out.writeUTF("잘못된 명령어 입니다");
						}
					}else{
						//전체 사용자에게 write
						SendAllMsg("["+ name  + "]" + msg);
					}
				} //while end
				
				
			}catch(Exception e){
				System.out.println("Thred run 예외발생 " + e.getMessage());
			}finally {
				//Client 종료 (퇴장)
				ClientMap.remove(name);
				SendAllMsg(name + "님 퇴장하셨습니다");
				System.out.println("서버 모니터링 : 현재 접속자는 " + ClientMap.size() + "명");
			}
		}
		
		
	}
	
	
	
	public static void main(String[] args) {
		Ex06_TCP_Multi_Server server = new Ex06_TCP_Multi_Server();
		server.init();

	}

}
